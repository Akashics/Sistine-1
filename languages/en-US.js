const { Language, util } = require('klasa');

module.exports = class extends Language {

	constructor(...args) {
		super(...args);
		this.language = {
			DEFAULT: key => `${key} has not been localized for en-US yet.`,
			DEFAULT_LANGUAGE: 'Default Language',
			SETTING_GATEWAY_EXPECTS_GUILD: 'The parameter <Guild> expects either a Guild or a Guild Object.',
			SETTING_GATEWAY_VALUE_FOR_KEY_NOEXT: (data, key) => `The value ${data} for the key ${key} does not exist.`,
			SETTING_GATEWAY_VALUE_FOR_KEY_ALREXT: (data, key) => `The value ${data} for the key ${key} already exists.`,
			SETTING_GATEWAY_SPECIFY_VALUE: 'You must specify the value to add or filter.',
			SETTING_GATEWAY_KEY_NOT_ARRAY: key => `The key ${key} is not an Array.`,
			SETTING_GATEWAY_KEY_NOEXT: key => `The key ${key} does not exist in the current data schema.`,
			SETTING_GATEWAY_INVALID_TYPE: 'The type parameter must be either add or remove.',
			RESOLVER_INVALID_PIECE: (name, piece) => `${name} must be a valid ${piece} name.`,
			RESOLVER_INVALID_MSG: name => `${name} must be a valid message id.`,
			RESOLVER_INVALID_USER: name => `${name} must be a mention or valid user id.`,
			RESOLVER_INVALID_MEMBER: name => `${name} must be a mention or valid user id.`,
			RESOLVER_INVALID_CHANNEL: name => `${name} must be a channel tag or valid channel id.`,
			RESOLVER_INVALID_GUILD: name => `${name} must be a valid guild id.`,
			RESOLVER_INVALID_ROLE: name => `${name} must be a role mention or role id.`,
			RESOLVER_INVALID_LITERAL: name => `Your option did not match the only possibility: ${name}`,
			RESOLVER_INVALID_BOOL: name => `${name} must be true or false.`,
			RESOLVER_INVALID_INT: name => `${name} must be an integer.`,
			RESOLVER_INVALID_FLOAT: name => `${name} must be a valid number.`,
			RESOLVER_INVALID_REGEX_MATCH: (name, pattern) => `${name} must follow this regex pattern \`${pattern}\`.`,
			RESOLVER_INVALID_URL: name => `${name} must be a valid url.`,
			RESOLVER_STRING_SUFFIX: ' characters',
			RESOLVER_MINMAX_EXACTLY: (name, min, suffix) => `${name} must be exactly ${min}${suffix}.`,
			RESOLVER_MINMAX_BOTH: (name, min, max, suffix) => `${name} must be between ${min} and ${max}${suffix}.`,
			RESOLVER_MINMAX_MIN: (name, min, suffix) => `${name} must be greater than ${min}${suffix}.`,
			RESOLVER_MINMAX_MAX: (name, max, suffix) => `${name} must be less than ${max}${suffix}.`,
			COMMANDMESSAGE_MISSING: 'Missing one or more required arguments after end of input.',
			COMMANDMESSAGE_MISSING_REQUIRED: name => `${name} is a required argument.`,
			COMMANDMESSAGE_MISSING_OPTIONALS: possibles => `Missing a required option: (${possibles})`,
			COMMANDMESSAGE_NOMATCH: possibles => `Your option didn't match any of the possibilities: (${possibles})`,
			MONITOR_COMMAND_HANDLER_REPROMPT: (tag, error) => `${tag} | **${error}** | You have **30** seconds to respond to this prompt with a valid argument. Type **"ABORT"** to abort this prompt.`,
			MONITOR_COMMAND_HANDLER_ABORTED: 'Aborted',
			INHIBITOR_COOLDOWN: remaining => `You have just used this command. You can use this command again in ${remaining} seconds.`,
			INHIBITOR_DISABLED: 'This command is currently disabled',
			INHIBITOR_MISSING_BOT_PERMS: missing => `Insufficient permissions, missing: **${missing}**`,
			INHIBITOR_PERMISSIONS: 'You do not have permission to use this command',
			INHIBITOR_REQUIRED_SETTINGS: settings => `The guild is missing the **${settings.join(', ')}** guild setting${settings.length > 1 ? 's' : ''} and thus the command cannot run.`,
			INHIBITOR_RUNIN: types => `This command is only available in ${types} channels`,
			INHIBITOR_RUNIN_NONE: name => `The ${name} command is not configured to run in any channel.`,
			COMMAD_UNLOAD: (type, name) => `✅ Unloaded ${type}: ${name}`,
			COMMAND_TRANSFER_ERROR: '❌ That file has been transfered already or never existed.',
			COMMAND_TRANSFER_SUCCESS: (type, name) => `✅ Successfully transferred ${type}: ${name}`,
			COMMAND_TRANSFER_FAILED: (type, name) => `Transfer of ${type}: ${name} to Client has failed. Please check your Console.`,
			COMMAND_RELOAD: (type, name) => `✅ Reloaded ${type}: ${name}`,
			COMMAND_RELOAD_ALL: type => `✅ Reloaded all ${type}.`,
			COMMAND_REBOOT: 'Rebooting...',
			COMMAND_PING: 'Ping?',
			COMMAND_PINGPONG: (diff, ping) => `Pong! (Roundtrip took: ${diff}ms. Heartbeat: ${ping}ms.)`,
			COMMAND_INVITE_SELFBOT: 'Why would you need an invite link for a selfbot...',
			COMMAND_INVITE: client => [
				`To add ${client.user.username} to your discord guild:`,
				client.invite,
				util.codeBlock('', [
					'The above link is generated requesting the minimum permissions required to use every command currently.',
					'I know not all permissions are right for every server, so don\'t be afraid to uncheck any of the boxes.',
					'If you try to use a command that requires more permissions than the bot is granted, it will let you know.'
				].join(' ')),
				'Please file an issue at <https://github.com/dirigeants/klasa> if you find any bugs.'
			],
			COMMAND_INFO: [
				'Sistine uses Klasa as a \'plug-and-play\' framework built on top of the Discord.js library.',
				'All of the code is writen by Kashall and is modularized, which allows developers like us',
				'to edit Klasa to suit their needs.',
				'',
				'Some features of Klasa include:',
				'• Fast Loading times with ES7 Support (Async/Await)',
				'• Per-server settings for each guild, that can be extended with your own code',
				'• Customizable Command system with automated usage parsing and easy to use reloading and downloading modules',
				'• "Monitors" which can watch messages and act on them, like a normal message event (Swear Filters, Spam Protection, etc)',
				'• "Inhibitors" which can prevent commands from running based on a set of parameters (Permissions, Blacklists, etc)',
				'• "Providers" which allow you to connect with an outside database of your choosing.',
				'• "Finalizers" which run on messages after a successful command.',
				'• "Extendables", code that acts passively. They add properties or methods to existing Discord.js classes.',
				'• "Languages", which allow you to localize your bot.',
				'',
				'We hope to be a 100% customizable framework that can cater to all audiences. We do frequent updates and bugfixes when available.',
				'If you\'re interested in us, check us out at https://klasa.js.org'
			],
			COMMAND_HELP_DM: ':blossom: All available commands to are being sent to your DMs.\nCommands are also available on my dashboard <https://sistine.ml/>',
			COMMAND_HELP_NODM: '❌ Your have DMs disabled, I couldn\'t send you the commands in DMs.\nYou can check <https://sistine.ml/> for commands if you\'d like',
			COMMAND_ENABLE: (type, name) => `+ Successfully enabled ${type}: ${name}`,
			COMMAND_DISABLE: (type, name) => `+ Successfully disabled ${type}: ${name}`,
			COMMAND_DISABLE_WARN: 'You probably don\'t want to disable that, since you wouldn\'t be able to run any command to enable it again',
			COMMAND_CONF_NOKEY: 'You must provide a key to use.',
			COMMAND_CONF_NOVALUE: 'You must provide a value to use.',
			COMMAND_CONF_ADDED: (value, key) => `Successfully added the value \`${value}\` to the key: **${key}**`,
			COMMAND_CONF_UPDATED: (key, response) => `Successfully updated the key **${key}**: \`${response}\``,
			COMMAND_CONF_KEY_NOT_ARRAY: 'This key is not array type. Use the action \'reset\' instead.',
			COMMAND_CONF_REMOVE: (value, key) => `Successfully removed the value \`${value}\` from the key: **${key}**`,
			COMMAND_CONF_GET_NOEXT: key => `The key **${key}** does not seem to exist.`,
			COMMAND_CONF_GET: (key, value) => `The value for the key **${key}** is: \`${value}\``,
			COMMAND_CONF_RESET: (key, response) => `The key **${key}** has been reset to: \`${response}\``,
			COMMAND_SUBSCRIBE_NO_ROLE: 'This server does not have a configured announcement role.',
			COMMAND_SUBSCRIBE_SUCCESS: (role) => `Successfully granted the role: **${role}**`,
			COMMAND_UNSUBSCRIBE_SUCCESS: (role) => `Successfully removed the role: **${role}***`,
			COMMAND_SUBSCRIBE_NO_CHANNEL: 'This server does not have a configured announcement channel.',
			COMMAND_ANNOUNCEMENT: (role) => `**New announcement for** ${role}:`,
			SYSTEM_HIGHEST_ROLE: 'This role\'s hierarchy position is higher or equal than me, I am not able to grant it to anyone.',
			SYSTEM_CHANNEL_NOT_POSTABLE: 'I am not allowed to send messages to this channel.',
			BAN_SUCCESS: (user, reason) => `__${user}__ was successfully banned for __${reason}__.`,
			BAN_FAIL: 'That user is not bannable, you may have less permissions than that user.',
			KICK_SUCCESS: (user, reason) => `__${user}__ was successfully kicked for __${reason}__.`,
			KICK_FAIL: 'That user is not kickable, you may have less permissions than that user.',
			SBAN_SUCCESS: (user, reason) => `__${user}__ was successfully softbanned for __${reason}__.\nTheir messages from 24 hours to now have been deleted.`,
			SBAN_FAIL: 'That user is not softbannable, you may have less permissions than that user.',
			UNBAN_SUCCESS: (user, reason) => `__${user}__ was successfully unbanned for __${reason}__.`,
			UNBAN_FAIL: 'That user cannot be unbanned, they not be banned.',
			WARN_SUCCESS: (user, reason) => `__${user}__ was successfully warned for __${reason}__.`,
			WARN_FAIL: 'That user cannot be warned, they may have higher permissions than you do.',
			PUNISH_USER_ERROR: command => `You cannot execute \`${command}\` on that user.`,
			SUCCESSFUL_PUNISH: (type, user, reason) => `Successfully ${type} ${user} for ${reason}.`,
			PUNISH_UNBAN_ERROR: 'That user is not banned',
			MODLOG_CASE_ERROR: 'There are no modlog cases under that account or number.',
			MODLOG_REASON_UNKOWN: (prefix, selected) => `No reason specified, write '${prefix}reason ${selected}' to claim this log.`,
			MODLOG_UPDATE_SUCCESS: selected => `Successfully updated the log ${selected}`,
			MODLOG_NOT_FOUND: 'The modlog channel does not exist, did it get deleted?',
			USER: 'User',
			MODERATOR: 'Moderator',
			CASE: 'Case',
			REASON: 'Reason',
			TYPE: 'Type',
			NOT_SET: 'Not set.',
			LOCKDOWN: (locked, channel) => `Successfully ${locked ? '' : 'un'}locked the channel ${channel}.`,
			RELEASELOCK: 'Lockdown released.',
			UNRELEASELOCK: 'Lockdown to prevent spam.',
			PRUNE_SUCCESS: (pruned, limit, filter) => `Successfully deleted ${pruned}/${limit} messages from __${filter}__.`,
			SOFTBAN_PROCESS: 'Softban process, removed one day worth of messages.',
			EIGHTBALL_OUTLOOK: answer => `:8ball: I think \`${answer}\`.`,
			WTP_EMBED_TITLE: '<:pikablob:356256509929324545> You have 15 seconds. Guess this Pokemon.',
			WTP_OUT_TIME: name => `You ran out of time, the answer was ${name}.`,
			WTP_INCORRECT: name => `That is incorrect. Its name is ${name}.`,
			WTP_CORRECT: author => `You are correct ${author}. One point has been added to your account.`,
			COINFLIP: result => `<:coin:338772726712107008> I got ${result}s.`,
			SLOTS_WIN: 'Wow! You won! Great job... er... luck!',
			SLOTS_LOSE: 'Aww... You lost... Guess it\'s just bad luck, huh?',
			ANILIST_NO_RESULT: search => `☁ I could not find a result for "${search}".`,
			ERROR_OCCURED: err => `An error has occured, ${err}.\nA support developer has been notified.`,
			ACHIEVEMENT_GET: 'Achievement Get',
			NO_AVATAR: 'This user has no avatar.',
			USER_REACTION_SOLO: (user, thing) => `**${user} wants to ${thing}.**`,
			USER_REACTION: (author, user, thing) => `**${author} has ${thing} you ${user}!**`,
			WEEB_SERVICES: 'Sistine - https://sistine.ml | Images provided by Weeb.SH',
			MUSIC_URL_NOTFOUND: 'We couldn\'t find a video with that link.',
			MUSIC_ADDED_QUEUE: song => `:musical_note: \` ${song.title} \` was added to the music queue.`,
			MUSIC_PLAY: song => `:musical_note: Playing: \` ${song.title} \` as requested by: \`${song.requester} \``,
			MUSIC_AUTOPLAY: (author, enabled) => `:musical_note: YouTube AutoPlay has been \`${enabled ? 'enabled' : 'disabled'}\` by \`${author.tag}\``,
			MUSIC_USER_NOVOICE: ':musical_note: You are not connected to any voice channel that I can see.',
			MUSIC_NOCONNECT: ':musical_note: I do not have enough permissions to connect to your voice channel.',
			MUSIC_NOSPEAK: ':musical_note: I can connect... but not speak. Please turn on this permission so I may play music.',
			MUSIC_PAUSED: author => `:musical_note: Music was paused by ${author}.`,
			MUSIC_ALREADYPAUSED: ':musical_note: The stream is already paused.',
			MUSIC_ERR: err => `:musical_note: Something weird happened. - ${err}`,
			MUSIC_NOTPLAYING: status => `:musical_note: Not currently playing anything. Status: \`${status}\``,
			MUSIC_NOTDJ: ':musical_note: You can\'t execute this command when there are over 4 members. You must be at least a DJ Member.',
			MUSIC_PRUNEQ: music => `:musical_note: Pruned ${music}`,
			MUSIC_REMOVEDSONG: song => `:musical_note: Removed the song \` ${song.title} \` requested by \` ${song.requester}\`.`,
			MUSIC_OUTRANGE: music => `:musical_note: You went out of range, the queue has ${music} songs.`,
			MUSIC_RESUMED: author => `:musical_note: Music was resumed by ${author}.`,
			MUSIC_NOTPAUSED: ':musical_note: Music is already playing.',
			MUSIC_ALREADYVOTED: ':musical_note: You have already voted to skip this song.',
			DURATION: 'Duration',
			DESCRIPTION: 'Description',
			TIME_REMAIN: 'Time Remaining',
			ALREADY_SUBSCRIBE: (active, guild) => `You are already ${active ? 'subscribed' : 'unsubscribed'} to ${guild}.`,
			BEAUTIFUL: '_Admiring your painting..._',
			GAZING: user => `_Gazing at ${user}..._`,
			trumpInUse: 'Trump is currently making something illegal, please wait...',
			trumpSyntax: 'Cannot be longer than 10 characters or shorter than 1 character.',
			trumpIllegalCharacter: user => `Well great, now non-standard unicode characters are illegal. Thanks ${user}.`,
			trumpConvincing: thing => `_Convincing Trump that __${thing}__ should be illegal..._`,
			rateMyself: ':thinking: Really, I would always rate myself a 100/100.',
			rateWaifu: (user, rating) => `:thinking: I would rate ${user} a ${rating}/100.`,
			triggering: tag => `_Triggering ${tag}..._`
		};
	}

};
